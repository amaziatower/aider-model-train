import argparse
import json
from .profiler import Profiler
from .message import Message
from .llm import OpenAIJSONService
from .utils import parse_agb_console
from .agb import AGB_STATE_SPACE


def main():
    parser = argparse.ArgumentParser(description="Profile chat messages.")
    parser.add_argument("--file", type=str, help="A file name containing JSON chat messages.")
    parser.add_argument("--json", type=str, help="A JSON string containing chat messages.")
    parser.add_argument("--agbconsole", type=str, help="Path to console file generated by AutoGenBench run")
    parser.add_argument("--o", type=str, help="Output JSONL file to save the profile.")
    args = parser.parse_args()

    # If no arguments were provided, print the help message and exit.
    if not any(vars(args).values()):
        parser.print_help()
        parser.exit()

    if args.file:
        with open(args.file, "r") as f:
            chat_history_json = json.load(f)
            try:
                chat_history = [Message(**message) for message in chat_history_json]
            except Exception:
                print(
                    """Error parsing chat history. Please provide a file containing a list of JSON objects with the following keys: source, role, content."""
                )
                exit(1)
            profiler = Profiler(llm_service=OpenAIJSONService())

    elif args.json:
        chat_history_json = json.loads(args.json)
        chat_history = [Message(**message) for message in chat_history_json]
        profiler = Profiler(llm_service=OpenAIJSONService())

    elif args.agbconsole:
        chat_history = parse_agb_console(args.agbconsole)
        profiler = Profiler(state_space=AGB_STATE_SPACE, llm_service=OpenAIJSONService())

    jsonl_file = open(args.o, "w") if args.o else None

    num_messages = len(chat_history)
    print(f"Profiling {num_messages} messages...")

    for message in chat_history:
        profile = profiler.profile_message(message)
        state_names = [s.name for s in profile.states]
        sorted_state_names = sorted(state_names)
        print(",".join(sorted_state_names))

        if jsonl_file:
            jsonl_file.write(json.dumps(profile.to_dict()) + "\n")
