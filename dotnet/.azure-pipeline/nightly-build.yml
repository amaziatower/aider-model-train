name: dotnet-nightly-build-$(Date:yyMMdd)$(Rev:.r)

trigger:
  branches:
    include:
    - dotnet
pr: none

variables:
  solution: 'dotnet/AutoGen.sln'
  buildConfiguration: 'Publish'

stages:
#####################################
### STAGE: Build AutoGen
#####################################
- stage: Build_and_Pack
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'
    workspace:
      clean: all

    steps:
    - checkout: self
      displayName: checkout
      clean: true
    
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        useGlobalJson: true
        workingDirectory: 'dotnet'
    
    - task: NuGetToolInstaller@1
      displayName: 'NuGet tool installer'

    - powershell: |
        echo "Restore packages"
        echo "add dotnet-tool feed"
        dotnet nuget add source --name dotnet-tool https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json --configfile NuGet.config
        dotnet restore --verbosity Detailed
      workingDirectory: '$(Build.SourcesDirectory)/dotnet'
      displayName: 'dotnet restore'

    - task: DotNetCoreCLI@2
      displayName: build
      inputs:
        command: 'build'
        workingDirectory: dotnet
        arguments: |
            -c $(buildConfiguration)
            /p:SignAssembly=true
            /p:DelaySign=true
    
    - powershell:  |
        echo "Create nightly build package"
        dotnet pack -c $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) -p:VersionSuffix=nightly-$(Build.BuildNumber) --no-restore --no-build --verbosity Detailed
        echo "Create release package"
        dotnet pack -c $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) --no-restore --no-build --verbosity Detailed
        echo "Contents of Build.ArtifactStagingDirectory..."
        ls -R $(Build.ArtifactStagingDirectory)
      workingDirectory: '$(Build.SourcesDirectory)/dotnet'
      displayName: 'dotnet pack'
    
    - task: PublishPipelineArtifact@1
      displayName: 'Publish pack artifacts'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'build'
        publishLocation: 'pipeline'
        
